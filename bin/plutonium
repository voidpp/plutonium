#!/usr/bin/env python

import os, sys

from plutonium.modules.logger import load_logger

# get the user's home
base_working_dir = os.path.join(os.path.expanduser('~'), '.plutonium')
load_logger(os.path.join(base_working_dir, 'config', 'logger.json'))


from plutonium.modules.config import Config
from plutonium.modules.commands import CommandRequestHandler
from plutonium.modules.cliargumentstreeparser import CLIArgumentsTreeParser
from plutonium.modules.tools import FileReader
from plutonium.modules.plutonium_manager import PlutoniumManager

# import the classes with 'commandline' decorated functions! (maybe not used the class, but need to import)
from plutonium.modules.plutonium_class import Plutonium
from plutonium.modules.fetcher import Fetcher


# init argument parsing
control_command = dict(name = 'control', desc = dict(help = 'Commands for the running Plutonium core'), subcommands = [])

args_config = [
    dict(name = 'start', desc = dict(help = 'Start Plutonium')),
    dict(name = 'stop', desc = dict(help = 'Stop Plutonium')),
    dict(name = 'restart', desc = dict(help = 'Restart Plutonium')),
    dict(name = 'status', desc = dict(help = 'The status of Plutonium')),
    control_command,
]

# get the rpc method list to add args
for name in dir(CommandRequestHandler):
    attr = getattr(CommandRequestHandler, name)
    if hasattr(attr, 'commandline'):
        cmd_desc = attr.commandline
        control_command['subcommands'].append(dict(name = name, desc = dict(help = cmd_desc.help), arguments = cmd_desc.arguments))

parser = CLIArgumentsTreeParser(args_config, 'core')
args = parser.parse()


import logging
logger = logging.getLogger('init')

logger.info("Plutonium manager script")

# init config
try:
    config = Config(FileReader())
    config.load(os.path.join(base_working_dir, 'config', 'core.json'))
    logger.info('Config has been successfully loaded')
except Exception as e:
    logger.error('Exception occured during config parsing: ' + str(e))
    sys.exit(1)


import os

root = os.path.realpath(os.path.dirname(__file__))

# create manager
mgr = PlutoniumManager(config.data['command_server']['port'].value, os.path.join(base_working_dir, 'plutonium.pid'), "plutonium_starter")
command = getattr(mgr, args.sub.name)
command_args = args.sub.sub if 'sub' in args.sub else dict()
response = command(**command_args)
logger.info(response.message)

